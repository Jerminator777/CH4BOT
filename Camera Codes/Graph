# Program to count islands in boolean 2D matrix 
# credit to Neelam Yadav
# https://www.geeksforgeeks.org/find-number-of-islands/
# Devon's modification to create list of connected elements of found islands (orignal code only counted number of connected regions)

class Graph: 
  
    def __init__(self, row, col, g): 
        self.ROW = row 
        self.COL = col 
        self.graph = g 
  
    # A function to check if a given cell  
    # (row, col) can be included in DFS 
    def isSafe(self, i, j, visited): 
        # row number is in range, column number 
        # is in range and value is 1  
        # and not yet visited 
        return (i >= 0 and i < self.ROW and 
                j >= 0 and j < self.COL and 
                not visited[i][j] and self.graph[i][j]) 
              
  
    # A utility function to do DFS for a 2D  
    # boolean matrix. It only considers 
    # the 8 neighbours as adjacent vertices 
    def DFS(self, i, j, visited, cnt):
    
        # These arrays are used to get row and  
        # column numbers of 8 neighbours  
        # of a given cell 		
        rowNbr = [-1, -1, -1,  0, 0,  1, 1, 1]; 
        colNbr = [-1,  0,  1, -1, 1, -1, 0, 1];
        cnt.append([i,j])  
        # Mark this cell as visited 
        visited[i][j] = True
        # Recur for all connected neighbours 
        for k in range(8): 
            if self.isSafe(i + rowNbr[k], j + colNbr[k], visited):
                cnt = self.DFS(i + rowNbr[k], j + colNbr[k], visited, cnt)
        return cnt
  
    # The main function that returns 
    # count of islands in a given boolean 
    # 2D matrix 
    def countIslands(self): 
        # Make a bool array to mark visited cells. 
        # Initially all cells are unvisited 
        visited = [[False for j in range(self.COL)]for i in range(self.ROW)] 
  
        # Initialize count as 0 and travese  
        # through the all cells of 
        # given matrix 
        island_list = []
        for i in range(self.ROW): 
            for j in range(self.COL): 
                cnt = []
                # If a cell with value 1 is not visited yet,  
                # then new island found 
                if visited[i][j] == False and self.graph[i][j] ==1: 
                    # Visit all cells in this island  
                    # and increment island count 
                    ec = self.DFS(i, j, visited, cnt) 
                    island_list.append(ec)
  
        return island_list 

### TEST CASE ###

#graph = [[1, 1, 0, 0, 0], 
#        [0, 1, 0, 0, 1], 
#       [1, 0, 0, 1, 1], 
#        [0, 0, 0, 0, 0], 
#        [1, 0, 1, 0, 1]] 
#row = len(graph) 
#col = len(graph[0]) 
#g = Graph(row, col, graph)
#islands = g.countIslands()
#for island in islands:
#	print("Island number ", islands.index(island), "has ", len(island), "elements ", island)
#...
#Island number  0 has  4 elements  [[0, 0], [0, 1], [1, 1], [2, 0]]
#Island number  1 has  3 elements  [[1, 4], [2, 3], [2, 4]]
#Island number  2 has  1 elements  [[4, 0]]
#Island number  3 has  1 elements  [[4, 2]]
#Island number  4 has  1 elements  [[4, 4]]
